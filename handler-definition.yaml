# creating the PV for local file system
apiVersion: v1
kind: PersistentVolume
metadata:
  name: handler-pv
  labels:
    pv: handler-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/worker1/bookmyshow/handler

---

# creating the PVC to access the above PV
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: handler-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  selector:
    matchLabels:
      pv: handler-pv



---

# Create the basic secret for testing base on base64 encoding
# This secret will also be use for MongoDB deployment 
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: YWRtaW4=

---

# Creating a deployment for the handler server with affinity and tolerations to ensure it deploys specifically on the worker1 node.
# The Handler server uses a Docker image fetched from my public Docker Hub repository.
# In addition, we mount the container's volume to the specified PersistentVolumeClaim (PVC)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: handler-deploy
spec:
  selector:
    matchLabels:
      app: handler-deploy
  template:
    metadata:
      labels:
        app: handler-deploy
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: name
                  operator: In
                  values:
                    - worker1
      tolerations:
        - key: "app"
          operator: "Equal"
          value: "blue"
          effect: "NoSchedule"
      containers:
        - name: handler
          image: shubhamdevops2/handler:18
          imagePullPolicy: Always
          resources:
            limits:
              memory: "250Mi"
              cpu: "200m"
            requests:
              memory: "150Mi"
              cpu: "100m"
          ports:
            - containerPort: 3001
          volumeMounts:
            - name: handler-volume
              mountPath: /app
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysecret
                  key: username
            - name: DB_PW
              valueFrom:
                secretKeyRef:
                  name: mysecret
                  key: password
      volumes:
        - name: handler-volume
          persistentVolumeClaim:
            claimName: handler-pvc

---

# Create the service to connect with deployment
apiVersion: v1
kind: Service
metadata:
  name: handler-svc
spec:
  selector:
    app: handler-deploy
  ports:
  - name: handler
    port: 3001
    targetPort: 3001

---

# Create the HPA for autoscaling of the pods base on the CPU utilization. 
# Automatic pod scaling is configured based on CPU utilization, with scaling triggered when the container's CPU utilization exceeds 70%.
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: "handler-hpa"
  namespace: default
spec:
  maxReplicas: 2
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: handler-deploy
  targetCPUUtilizationPercentage: 70




